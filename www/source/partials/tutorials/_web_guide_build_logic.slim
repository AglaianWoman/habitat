section
 h1 Define Build Logic For Your App

 p When building your package, your project source (or pre-built binary) goes through a series of steps as part of the package compilation process. Depending on whether or not your Habitat plan resides in the same repo as your project, these steps could include downloading your source, unpacking it, building it, and then installing it into the appropriate location within a Habitat package.

 p The default behavior for these build steps are defined in build phase callbacks, which are functions called by Habitat when building your package. When overriding any #{link_to 'callbacks','/docs/reference#reference-callbacks'}, you may use any of the #{link_to 'plan variables','/docs/reference#plan-variables'}, #{link_to 'settings','/docs/reference#plan-settings'}, or #{link_to 'functions','/docs/reference#utility-functions'} in the #{link_to 'Plan syntax guide', '/docs/reference'}, except for the #{link_to 'runtime configuration settings','/docs/reference#template-data/'}. Those can only be used in runtime hooks once a Habitat service is running.

 - if "#{current_page.data.platform_short}" == "aspnet-core"
   h3 Overriding Build Phase Callbacks

   p You can override build phase callbacks in your plan. Default behavior may be changed and new functionality can be introduced to package your ASP.NET application appropriately.

   p At a minimum, you will want to override the <code>Invoke-Build</code> function to install dependent .Net assemblies and compile your application code. You will also need to override <code>Invoke-Install</code> to publish the artifacts of your build to the Habitat build's package directory.

   = code(:bash) do
     |
       function Invoke-Build() {
         cp $PLAN_CONTEXT/../* $HAB_CACHE_SRC_PATH/$pkg_dirname -recurse -force
         & "$(Get-HabPackagePath dotnet-core-sdk)\bin\dotnet.exe" restore
         & "$(Get-HabPackagePath dotnet-core-sdk)\bin\dotnet.exe" build
         if($LASTEXITCODE -ne 0) {
           Write-Error "dotnet build failed!"
         }
       }

       function Invoke-Install {
         & "$(Get-HabPackagePath dotnet-core-sdk)\bin\dotnet.exe" publish --output "$pkg_prefix/www"
       }
   
   Here we use the <code>dotnet.exe</code> utility to populate dependencies (restore), build and publish our artifacts. We use the <code>Get-HabPackagePath</code> helper function to locate <code>dotnet.exe</code>. This usually not be necessary but because we added both the SDK and runtime and each of those have their own <code>dotnet.exe</code>, its difficult to guarantee which will be first on the path. Using the <code>Get-HabPackagePath</code> function allows us to point to the absolute path of the SDK which includes the restore, build, and publish subcommands.

 - else
   h3 Using scaffolding functionality

   p Scaffoldings override callbacks the same way you can override them in your plan. Default behavior is changed and new functionality is introduced to package your application appropriately according to the scaffolding language you declared.

   p The following are a set of functions that are called by the #{current_page.data.platform} scaffolding. They override default implementations of functions that are used in callbacks by Habitat when building packages. For example, the <code>do_build</code> has a <code>do_default_build</code> function that gets called inside of it. The <code>do_default_build</code> function performs the following actions:

   = code(:shell) do
     |
       $ ./configure --prefix=$pkg_prefix
       $ make

   p The implementation of <code>do_default_build</code> is overridden by the #{current_page.data.platform} scaffolding; however, there is no general override of the <code>do_build</code> callback by the scaffolding. This allows you to both override existing behavior as well as wrap your own custom build logic.

   p The following are the list of overridden scaffolding functions that can be overridden by you, or left to their default implementations.

   = partial "/partials/tutorials/web_guide_#{current_page.data.platform_short}_scaffolding_functions"

   p If you want to use scaffolding and also perform additional setup, configuration, or other logic, you can override the <code>do_prepare()</code>, <code>do_build()</code>, or <code>do_install()</code> callbacks. To do this, simply omit the <code>do_default_build</code> line and place your custom logic inside a <code>do_build</code> override, as shown in the example below.

   = code(:bash) do
     |
       do_build() {
       # Execute business logic before calling the default scaffolding implementation.

       # This calls the default scaffolding implementation, like
       # calling `super` in other languages.
       do_default_build

       # Execute business logic after calling the default scaffolding implementation.
       }

   p If you wanted to override the default behavior of the scaffolding, then you would simply omit the <code>do_default_build</code> line above and place your custom logic inside a <code>do_build()</code> override.

= link_to 'Next: Define Hooks', "/tutorials/build-your-own/#{current_page.data.platform_short}/define-hooks/", class: 'button cta'
